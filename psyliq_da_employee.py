# -*- coding: utf-8 -*-
"""Psyliq_DA_Employee.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WnEe1QKI89ns4J_pM9_KLm7Yy-1dO8KE
"""

from google.colab import files

# Open a dialog box to upload files
uploaded = files.upload()

import pandas as pd

# Dictionary to hold the dataframes
dataframes = {}

# Load each file into a pandas DataFrame
for filename in uploaded.keys():
    if filename.endswith('.xlsx'):
        dataframes[filename] = pd.read_excel(filename)
    elif filename.endswith('.csv'):
        dataframes[filename] = pd.read_csv(filename)
    print(f'Loaded {filename}')

# Example of accessing a specific DataFrame
employee_data_df = dataframes['employee_data.xlsx']
employee_engagement_survey_df = dataframes['employee_engagement_survey_data.csv']
recruitment_data_df = dataframes['recruitment_data.csv']
training_and_development_data_df = dataframes['training_and_development_data.csv']

# Merge the datasets on 'Employee ID'
combined_df = pd.merge(employee_data_df, employee_engagement_survey_df, on='Employee ID', how='inner')

#Q1
# Create a pivot table to summarize the total number of employees in each department
pivot_total_employees = employee_data_df.pivot_table(index='DepartmentType', aggfunc='size')
print(pivot_total_employees)

#Q2
# Filter and display employees with "Performance Score" below 3
low_performance = employee_data_df[employee_data_df['Current Employee Rating'] < 3]
print(low_performance)

#Q3
# Calculate average "Satisfaction Score" for male and female employees
pivot_satisfaction_score = combined_df.pivot_table(index='GenderCode', values='Satisfaction Score', aggfunc='mean')
print(pivot_satisfaction_score)

#Q4
import seaborn as sns
import matplotlib.pyplot as plt

# Visualize distribution of "Work-Life Balance Score" for different job functions
plt.figure(figsize=(10, 6))
sns.boxplot(x='JobFunctionDescription', y='Work-Life Balance Score', data=combined_df)
plt.xticks(rotation=90)
plt.title('Work-Life Balance Score Distribution by Job Function')
plt.show()

#Q5
# Filter to display only terminated employees
terminated_employees = combined_df[combined_df['EmployeeStatus'] == 'Voluntarily Terminated']

# Find the most common "Termination Type"
most_common_termination_type = terminated_employees['TerminationType'].mode()[0]
print(f'Most common Termination Type: {most_common_termination_type}')

#Q6
# Calculate average "Engagement Score" for each department
pivot_engagement_score = combined_df.pivot_table(index='DepartmentType', values='Engagement Score', aggfunc='mean')
print(pivot_engagement_score)

#Q7
# Find supervisor's email for a specific employee ID (example: employee_id = 12345)
employee_id = 3427
supervisor_email = combined_df.loc[combined_df['Employee ID'] == employee_id, 'ADEmail'].values[0]
print(f'Supervisor Email for Employee ID {employee_id}: {supervisor_email}')

#Q8
# Calculate average "Employee Rating" for each department
pivot_employee_rating = combined_df.pivot_table(index='DepartmentType', values='Current Employee Rating', aggfunc='mean')
highest_avg_rating_dept = pivot_employee_rating['Current Employee Rating'].idxmax()
print(f'Department with the highest average Employee Rating: {highest_avg_rating_dept}')

#Q9
# Scatter plot for "Training Duration (Days)" vs "Training Cost"
plt.figure(figsize=(10, 6))
plt.scatter(training_and_development_data_df['Training Duration(Days)'], training_and_development_data_df['Training Cost'])
plt.title('Training Duration vs Training Cost')
plt.xlabel('Training Duration (Days)')
plt.ylabel('Training Cost')
plt.show()

#Q10
# Pivot table for count of employees by "RaceDesc" and "GenderCode"
pivot_race_gender = combined_df.pivot_table(index='RaceDesc', columns='GenderCode', aggfunc='size', fill_value=0)
print(pivot_race_gender)

#Q11
# Example employee ID for which we want to find the training program name
employee_id = 1001

# Filter the training data for the specific employee ID
employee_training_data = training_and_development_data_df[training_and_development_data_df['Employee ID'] == employee_id]

# Extract the training program name
training_program_name = employee_training_data['Training Program Name'].values[0]

print(f'Training Program Name for Employee ID {employee_id}: {training_program_name}')

#Q12
# Multi-level pivot table for "Performance Score" by "BusinessUnit" and "JobFunctionDescription"
pivot_performance_score = combined_df.pivot_table(index=['BusinessUnit', 'JobFunctionDescription'], values='Current Employee Rating', aggfunc='mean')
print(pivot_performance_score)

#Q13
import plotly.express as px

# Example employee ID for dynamic selection
employee_id = 3427

# Filter data for the selected employee
employee_data = combined_df[combined_df['Employee ID'] == employee_id]

# Create a line plot
fig = px.line(employee_data, x='StartDate', y='Current Employee Rating', title=f'Performance Over Time for Employee ID {employee_id}')
fig.show()

#Q14
# Total training cost for each "Training Program Name"
total_training_cost = training_and_development_data_df.groupby('Training Program Name')['Training Cost'].sum().reset_index()

# Bar chart for total training cost
plt.figure(figsize=(12, 6))
sns.barplot(x='Training Program Name', y='Training Cost', data=total_training_cost)
plt.xticks(rotation=90)
plt.title('Total Training Cost by Training Program Name')
plt.show()

#Q15
# Calculate the 10th and 90th percentiles of employee ratings
top_10_percentile = combined_df['Current Employee Rating'].quantile(0.9)
bottom_10_percentile = combined_df['Current Employee Rating'].quantile(0.1)

# Filter employees based on percentiles
top_10_percentile_employees = combined_df[combined_df['Current Employee Rating'] >= top_10_percentile]
bottom_10_percentile_employees = combined_df[combined_df['Current Employee Rating'] <= bottom_10_percentile]
bottom_10_percentile_employees

#Q16
# Extract year from StartDate
combined_df['Year'] = pd.to_datetime(combined_df['StartDate']).dt.year

# Pivot table for average "Engagement Score" per year
pivot_engagement_score_year = combined_df.pivot_table(index='Year', values='Engagement Score', aggfunc='mean')
print(pivot_engagement_score_year)

#Q19
# Total training cost for employees in a specific location
location = 'Lake Anthonyton'  # Example location
total_training_cost_location = training_and_development_data_df[training_and_development_data_df['Location'] == location]['Training Cost'].sum()
print(f'Total Training Cost for employees in {location}: {total_training_cost_location}')